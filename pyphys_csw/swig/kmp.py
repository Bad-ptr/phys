# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kmp', [dirname(__file__)])
        except ImportError:
            import _kmp
            return _kmp
        if fp is not None:
            try:
                _mod = imp.load_module('_kmp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kmp = swig_import_helper()
    del swig_import_helper
else:
    import _kmp
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def ptr_cmp(*args):
  return _kmp.ptr_cmp(*args)
ptr_cmp = _kmp.ptr_cmp

def ptr_cp(*args):
  return _kmp.ptr_cp(*args)
ptr_cp = _kmp.ptr_cp

def uchar_add(*args):
  return _kmp.uchar_add(*args)
uchar_add = _kmp.uchar_add

def uchar_sub(*args):
  return _kmp.uchar_sub(*args)
uchar_sub = _kmp.uchar_sub

def uchar_mul(*args):
  return _kmp.uchar_mul(*args)
uchar_mul = _kmp.uchar_mul

def uchar_div(*args):
  return _kmp.uchar_div(*args)
uchar_div = _kmp.uchar_div

def uchar_rem(*args):
  return _kmp.uchar_rem(*args)
uchar_rem = _kmp.uchar_rem

def uchar_lshift(*args):
  return _kmp.uchar_lshift(*args)
uchar_lshift = _kmp.uchar_lshift

def uchar_rshift(*args):
  return _kmp.uchar_rshift(*args)
uchar_rshift = _kmp.uchar_rshift

def uchar_and(*args):
  return _kmp.uchar_and(*args)
uchar_and = _kmp.uchar_and

def uchar_or(*args):
  return _kmp.uchar_or(*args)
uchar_or = _kmp.uchar_or

def uchar_xor(*args):
  return _kmp.uchar_xor(*args)
uchar_xor = _kmp.uchar_xor

def uchar_inv(*args):
  return _kmp.uchar_inv(*args)
uchar_inv = _kmp.uchar_inv

def uchar_preinc(*args):
  return _kmp.uchar_preinc(*args)
uchar_preinc = _kmp.uchar_preinc

def uchar_postinc(*args):
  return _kmp.uchar_postinc(*args)
uchar_postinc = _kmp.uchar_postinc

def uchar_predec(*args):
  return _kmp.uchar_predec(*args)
uchar_predec = _kmp.uchar_predec

def uchar_postdec(*args):
  return _kmp.uchar_postdec(*args)
uchar_postdec = _kmp.uchar_postdec

def uchar_neg(*args):
  return _kmp.uchar_neg(*args)
uchar_neg = _kmp.uchar_neg

def uchar_mod(*args):
  return _kmp.uchar_mod(*args)
uchar_mod = _kmp.uchar_mod

def uchar_pow(*args):
  return _kmp.uchar_pow(*args)
uchar_pow = _kmp.uchar_pow

def uchar_cmp(*args):
  return _kmp.uchar_cmp(*args)
uchar_cmp = _kmp.uchar_cmp

def uchar_cp(*args):
  return _kmp.uchar_cp(*args)
uchar_cp = _kmp.uchar_cp

def uint_add(*args):
  return _kmp.uint_add(*args)
uint_add = _kmp.uint_add

def uint_sub(*args):
  return _kmp.uint_sub(*args)
uint_sub = _kmp.uint_sub

def uint_mul(*args):
  return _kmp.uint_mul(*args)
uint_mul = _kmp.uint_mul

def uint_div(*args):
  return _kmp.uint_div(*args)
uint_div = _kmp.uint_div

def uint_rem(*args):
  return _kmp.uint_rem(*args)
uint_rem = _kmp.uint_rem

def uint_lshift(*args):
  return _kmp.uint_lshift(*args)
uint_lshift = _kmp.uint_lshift

def uint_rshift(*args):
  return _kmp.uint_rshift(*args)
uint_rshift = _kmp.uint_rshift

def uint_and(*args):
  return _kmp.uint_and(*args)
uint_and = _kmp.uint_and

def uint_or(*args):
  return _kmp.uint_or(*args)
uint_or = _kmp.uint_or

def uint_xor(*args):
  return _kmp.uint_xor(*args)
uint_xor = _kmp.uint_xor

def uint_inv(*args):
  return _kmp.uint_inv(*args)
uint_inv = _kmp.uint_inv

def uint_preinc(*args):
  return _kmp.uint_preinc(*args)
uint_preinc = _kmp.uint_preinc

def uint_postinc(*args):
  return _kmp.uint_postinc(*args)
uint_postinc = _kmp.uint_postinc

def uint_predec(*args):
  return _kmp.uint_predec(*args)
uint_predec = _kmp.uint_predec

def uint_postdec(*args):
  return _kmp.uint_postdec(*args)
uint_postdec = _kmp.uint_postdec

def uint_neg(*args):
  return _kmp.uint_neg(*args)
uint_neg = _kmp.uint_neg

def uint_mod(*args):
  return _kmp.uint_mod(*args)
uint_mod = _kmp.uint_mod

def uint_pow(*args):
  return _kmp.uint_pow(*args)
uint_pow = _kmp.uint_pow

def uint_cmp(*args):
  return _kmp.uint_cmp(*args)
uint_cmp = _kmp.uint_cmp

def uint_cp(*args):
  return _kmp.uint_cp(*args)
uint_cp = _kmp.uint_cp

def ushort_add(*args):
  return _kmp.ushort_add(*args)
ushort_add = _kmp.ushort_add

def ushort_sub(*args):
  return _kmp.ushort_sub(*args)
ushort_sub = _kmp.ushort_sub

def ushort_mul(*args):
  return _kmp.ushort_mul(*args)
ushort_mul = _kmp.ushort_mul

def ushort_div(*args):
  return _kmp.ushort_div(*args)
ushort_div = _kmp.ushort_div

def ushort_rem(*args):
  return _kmp.ushort_rem(*args)
ushort_rem = _kmp.ushort_rem

def ushort_lshift(*args):
  return _kmp.ushort_lshift(*args)
ushort_lshift = _kmp.ushort_lshift

def ushort_rshift(*args):
  return _kmp.ushort_rshift(*args)
ushort_rshift = _kmp.ushort_rshift

def ushort_and(*args):
  return _kmp.ushort_and(*args)
ushort_and = _kmp.ushort_and

def ushort_or(*args):
  return _kmp.ushort_or(*args)
ushort_or = _kmp.ushort_or

def ushort_xor(*args):
  return _kmp.ushort_xor(*args)
ushort_xor = _kmp.ushort_xor

def ushort_inv(*args):
  return _kmp.ushort_inv(*args)
ushort_inv = _kmp.ushort_inv

def ushort_preinc(*args):
  return _kmp.ushort_preinc(*args)
ushort_preinc = _kmp.ushort_preinc

def ushort_postinc(*args):
  return _kmp.ushort_postinc(*args)
ushort_postinc = _kmp.ushort_postinc

def ushort_predec(*args):
  return _kmp.ushort_predec(*args)
ushort_predec = _kmp.ushort_predec

def ushort_postdec(*args):
  return _kmp.ushort_postdec(*args)
ushort_postdec = _kmp.ushort_postdec

def ushort_neg(*args):
  return _kmp.ushort_neg(*args)
ushort_neg = _kmp.ushort_neg

def ushort_mod(*args):
  return _kmp.ushort_mod(*args)
ushort_mod = _kmp.ushort_mod

def ushort_pow(*args):
  return _kmp.ushort_pow(*args)
ushort_pow = _kmp.ushort_pow

def ushort_cmp(*args):
  return _kmp.ushort_cmp(*args)
ushort_cmp = _kmp.ushort_cmp

def ushort_cp(*args):
  return _kmp.ushort_cp(*args)
ushort_cp = _kmp.ushort_cp

def ulonglong_add(*args):
  return _kmp.ulonglong_add(*args)
ulonglong_add = _kmp.ulonglong_add

def ulonglong_sub(*args):
  return _kmp.ulonglong_sub(*args)
ulonglong_sub = _kmp.ulonglong_sub

def ulonglong_mul(*args):
  return _kmp.ulonglong_mul(*args)
ulonglong_mul = _kmp.ulonglong_mul

def ulonglong_div(*args):
  return _kmp.ulonglong_div(*args)
ulonglong_div = _kmp.ulonglong_div

def ulonglong_rem(*args):
  return _kmp.ulonglong_rem(*args)
ulonglong_rem = _kmp.ulonglong_rem

def ulonglong_lshift(*args):
  return _kmp.ulonglong_lshift(*args)
ulonglong_lshift = _kmp.ulonglong_lshift

def ulonglong_rshift(*args):
  return _kmp.ulonglong_rshift(*args)
ulonglong_rshift = _kmp.ulonglong_rshift

def ulonglong_and(*args):
  return _kmp.ulonglong_and(*args)
ulonglong_and = _kmp.ulonglong_and

def ulonglong_or(*args):
  return _kmp.ulonglong_or(*args)
ulonglong_or = _kmp.ulonglong_or

def ulonglong_xor(*args):
  return _kmp.ulonglong_xor(*args)
ulonglong_xor = _kmp.ulonglong_xor

def ulonglong_inv(*args):
  return _kmp.ulonglong_inv(*args)
ulonglong_inv = _kmp.ulonglong_inv

def ulonglong_preinc(*args):
  return _kmp.ulonglong_preinc(*args)
ulonglong_preinc = _kmp.ulonglong_preinc

def ulonglong_postinc(*args):
  return _kmp.ulonglong_postinc(*args)
ulonglong_postinc = _kmp.ulonglong_postinc

def ulonglong_predec(*args):
  return _kmp.ulonglong_predec(*args)
ulonglong_predec = _kmp.ulonglong_predec

def ulonglong_postdec(*args):
  return _kmp.ulonglong_postdec(*args)
ulonglong_postdec = _kmp.ulonglong_postdec

def ulonglong_neg(*args):
  return _kmp.ulonglong_neg(*args)
ulonglong_neg = _kmp.ulonglong_neg

def ulonglong_mod(*args):
  return _kmp.ulonglong_mod(*args)
ulonglong_mod = _kmp.ulonglong_mod

def ulonglong_pow(*args):
  return _kmp.ulonglong_pow(*args)
ulonglong_pow = _kmp.ulonglong_pow

def ulonglong_cmp(*args):
  return _kmp.ulonglong_cmp(*args)
ulonglong_cmp = _kmp.ulonglong_cmp

def ulonglong_cp(*args):
  return _kmp.ulonglong_cp(*args)
ulonglong_cp = _kmp.ulonglong_cp

def kchar_add(*args):
  return _kmp.kchar_add(*args)
kchar_add = _kmp.kchar_add

def kchar_sub(*args):
  return _kmp.kchar_sub(*args)
kchar_sub = _kmp.kchar_sub

def kchar_mul(*args):
  return _kmp.kchar_mul(*args)
kchar_mul = _kmp.kchar_mul

def kchar_div(*args):
  return _kmp.kchar_div(*args)
kchar_div = _kmp.kchar_div

def kchar_rem(*args):
  return _kmp.kchar_rem(*args)
kchar_rem = _kmp.kchar_rem

def kchar_lshift(*args):
  return _kmp.kchar_lshift(*args)
kchar_lshift = _kmp.kchar_lshift

def kchar_rshift(*args):
  return _kmp.kchar_rshift(*args)
kchar_rshift = _kmp.kchar_rshift

def kchar_and(*args):
  return _kmp.kchar_and(*args)
kchar_and = _kmp.kchar_and

def kchar_or(*args):
  return _kmp.kchar_or(*args)
kchar_or = _kmp.kchar_or

def kchar_xor(*args):
  return _kmp.kchar_xor(*args)
kchar_xor = _kmp.kchar_xor

def kchar_inv(*args):
  return _kmp.kchar_inv(*args)
kchar_inv = _kmp.kchar_inv

def kchar_preinc(*args):
  return _kmp.kchar_preinc(*args)
kchar_preinc = _kmp.kchar_preinc

def kchar_postinc(*args):
  return _kmp.kchar_postinc(*args)
kchar_postinc = _kmp.kchar_postinc

def kchar_predec(*args):
  return _kmp.kchar_predec(*args)
kchar_predec = _kmp.kchar_predec

def kchar_postdec(*args):
  return _kmp.kchar_postdec(*args)
kchar_postdec = _kmp.kchar_postdec

def kchar_neg(*args):
  return _kmp.kchar_neg(*args)
kchar_neg = _kmp.kchar_neg

def kchar_mod(*args):
  return _kmp.kchar_mod(*args)
kchar_mod = _kmp.kchar_mod

def kchar_pow(*args):
  return _kmp.kchar_pow(*args)
kchar_pow = _kmp.kchar_pow

def kchar_cmp(*args):
  return _kmp.kchar_cmp(*args)
kchar_cmp = _kmp.kchar_cmp

def kchar_cp(*args):
  return _kmp.kchar_cp(*args)
kchar_cp = _kmp.kchar_cp

def kint_add(*args):
  return _kmp.kint_add(*args)
kint_add = _kmp.kint_add

def kint_sub(*args):
  return _kmp.kint_sub(*args)
kint_sub = _kmp.kint_sub

def kint_mul(*args):
  return _kmp.kint_mul(*args)
kint_mul = _kmp.kint_mul

def kint_div(*args):
  return _kmp.kint_div(*args)
kint_div = _kmp.kint_div

def kint_rem(*args):
  return _kmp.kint_rem(*args)
kint_rem = _kmp.kint_rem

def kint_lshift(*args):
  return _kmp.kint_lshift(*args)
kint_lshift = _kmp.kint_lshift

def kint_rshift(*args):
  return _kmp.kint_rshift(*args)
kint_rshift = _kmp.kint_rshift

def kint_and(*args):
  return _kmp.kint_and(*args)
kint_and = _kmp.kint_and

def kint_or(*args):
  return _kmp.kint_or(*args)
kint_or = _kmp.kint_or

def kint_xor(*args):
  return _kmp.kint_xor(*args)
kint_xor = _kmp.kint_xor

def kint_inv(*args):
  return _kmp.kint_inv(*args)
kint_inv = _kmp.kint_inv

def kint_preinc(*args):
  return _kmp.kint_preinc(*args)
kint_preinc = _kmp.kint_preinc

def kint_postinc(*args):
  return _kmp.kint_postinc(*args)
kint_postinc = _kmp.kint_postinc

def kint_predec(*args):
  return _kmp.kint_predec(*args)
kint_predec = _kmp.kint_predec

def kint_postdec(*args):
  return _kmp.kint_postdec(*args)
kint_postdec = _kmp.kint_postdec

def kint_neg(*args):
  return _kmp.kint_neg(*args)
kint_neg = _kmp.kint_neg

def kint_mod(*args):
  return _kmp.kint_mod(*args)
kint_mod = _kmp.kint_mod

def kint_pow(*args):
  return _kmp.kint_pow(*args)
kint_pow = _kmp.kint_pow

def kint_cmp(*args):
  return _kmp.kint_cmp(*args)
kint_cmp = _kmp.kint_cmp

def kint_cp(*args):
  return _kmp.kint_cp(*args)
kint_cp = _kmp.kint_cp

def ksize_add(*args):
  return _kmp.ksize_add(*args)
ksize_add = _kmp.ksize_add

def ksize_sub(*args):
  return _kmp.ksize_sub(*args)
ksize_sub = _kmp.ksize_sub

def ksize_mul(*args):
  return _kmp.ksize_mul(*args)
ksize_mul = _kmp.ksize_mul

def ksize_div(*args):
  return _kmp.ksize_div(*args)
ksize_div = _kmp.ksize_div

def ksize_rem(*args):
  return _kmp.ksize_rem(*args)
ksize_rem = _kmp.ksize_rem

def ksize_lshift(*args):
  return _kmp.ksize_lshift(*args)
ksize_lshift = _kmp.ksize_lshift

def ksize_rshift(*args):
  return _kmp.ksize_rshift(*args)
ksize_rshift = _kmp.ksize_rshift

def ksize_and(*args):
  return _kmp.ksize_and(*args)
ksize_and = _kmp.ksize_and

def ksize_or(*args):
  return _kmp.ksize_or(*args)
ksize_or = _kmp.ksize_or

def ksize_xor(*args):
  return _kmp.ksize_xor(*args)
ksize_xor = _kmp.ksize_xor

def ksize_inv(*args):
  return _kmp.ksize_inv(*args)
ksize_inv = _kmp.ksize_inv

def ksize_preinc(*args):
  return _kmp.ksize_preinc(*args)
ksize_preinc = _kmp.ksize_preinc

def ksize_postinc(*args):
  return _kmp.ksize_postinc(*args)
ksize_postinc = _kmp.ksize_postinc

def ksize_predec(*args):
  return _kmp.ksize_predec(*args)
ksize_predec = _kmp.ksize_predec

def ksize_postdec(*args):
  return _kmp.ksize_postdec(*args)
ksize_postdec = _kmp.ksize_postdec

def ksize_neg(*args):
  return _kmp.ksize_neg(*args)
ksize_neg = _kmp.ksize_neg

def ksize_mod(*args):
  return _kmp.ksize_mod(*args)
ksize_mod = _kmp.ksize_mod

def ksize_pow(*args):
  return _kmp.ksize_pow(*args)
ksize_pow = _kmp.ksize_pow

def ksize_cmp(*args):
  return _kmp.ksize_cmp(*args)
ksize_cmp = _kmp.ksize_cmp

def ksize_cp(*args):
  return _kmp.ksize_cp(*args)
ksize_cp = _kmp.ksize_cp

def kfloat_add(*args):
  return _kmp.kfloat_add(*args)
kfloat_add = _kmp.kfloat_add

def kfloat_sub(*args):
  return _kmp.kfloat_sub(*args)
kfloat_sub = _kmp.kfloat_sub

def kfloat_mul(*args):
  return _kmp.kfloat_mul(*args)
kfloat_mul = _kmp.kfloat_mul

def kfloat_div(*args):
  return _kmp.kfloat_div(*args)
kfloat_div = _kmp.kfloat_div

def kfloat_rem(*args):
  return _kmp.kfloat_rem(*args)
kfloat_rem = _kmp.kfloat_rem

def kfloat_preinc(*args):
  return _kmp.kfloat_preinc(*args)
kfloat_preinc = _kmp.kfloat_preinc

def kfloat_postinc(*args):
  return _kmp.kfloat_postinc(*args)
kfloat_postinc = _kmp.kfloat_postinc

def kfloat_predec(*args):
  return _kmp.kfloat_predec(*args)
kfloat_predec = _kmp.kfloat_predec

def kfloat_postdec(*args):
  return _kmp.kfloat_postdec(*args)
kfloat_postdec = _kmp.kfloat_postdec

def kfloat_neg(*args):
  return _kmp.kfloat_neg(*args)
kfloat_neg = _kmp.kfloat_neg

def kfloat_mod(*args):
  return _kmp.kfloat_mod(*args)
kfloat_mod = _kmp.kfloat_mod

def kfloat_pow(*args):
  return _kmp.kfloat_pow(*args)
kfloat_pow = _kmp.kfloat_pow

def kfloat_cmp(*args):
  return _kmp.kfloat_cmp(*args)
kfloat_cmp = _kmp.kfloat_cmp

def kfloat_cp(*args):
  return _kmp.kfloat_cp(*args)
kfloat_cp = _kmp.kfloat_cp

def kdouble_add(*args):
  return _kmp.kdouble_add(*args)
kdouble_add = _kmp.kdouble_add

def kdouble_sub(*args):
  return _kmp.kdouble_sub(*args)
kdouble_sub = _kmp.kdouble_sub

def kdouble_mul(*args):
  return _kmp.kdouble_mul(*args)
kdouble_mul = _kmp.kdouble_mul

def kdouble_div(*args):
  return _kmp.kdouble_div(*args)
kdouble_div = _kmp.kdouble_div

def kdouble_rem(*args):
  return _kmp.kdouble_rem(*args)
kdouble_rem = _kmp.kdouble_rem

def kdouble_preinc(*args):
  return _kmp.kdouble_preinc(*args)
kdouble_preinc = _kmp.kdouble_preinc

def kdouble_postinc(*args):
  return _kmp.kdouble_postinc(*args)
kdouble_postinc = _kmp.kdouble_postinc

def kdouble_predec(*args):
  return _kmp.kdouble_predec(*args)
kdouble_predec = _kmp.kdouble_predec

def kdouble_postdec(*args):
  return _kmp.kdouble_postdec(*args)
kdouble_postdec = _kmp.kdouble_postdec

def kdouble_neg(*args):
  return _kmp.kdouble_neg(*args)
kdouble_neg = _kmp.kdouble_neg

def kdouble_mod(*args):
  return _kmp.kdouble_mod(*args)
kdouble_mod = _kmp.kdouble_mod

def kdouble_pow(*args):
  return _kmp.kdouble_pow(*args)
kdouble_pow = _kmp.kdouble_pow

def kdouble_cmp(*args):
  return _kmp.kdouble_cmp(*args)
kdouble_cmp = _kmp.kdouble_cmp

def kdouble_cp(*args):
  return _kmp.kdouble_cp(*args)
kdouble_cp = _kmp.kdouble_cp

def kptr_sub(*args):
  return _kmp.kptr_sub(*args)
kptr_sub = _kmp.kptr_sub

def kptr_preinc(*args):
  return _kmp.kptr_preinc(*args)
kptr_preinc = _kmp.kptr_preinc

def kptr_postinc(*args):
  return _kmp.kptr_postinc(*args)
kptr_postinc = _kmp.kptr_postinc

def kptr_predec(*args):
  return _kmp.kptr_predec(*args)
kptr_predec = _kmp.kptr_predec

def kptr_postdec(*args):
  return _kmp.kptr_postdec(*args)
kptr_postdec = _kmp.kptr_postdec

def kptr_cmp(*args):
  return _kmp.kptr_cmp(*args)
kptr_cmp = _kmp.kptr_cmp

def kptr_cp(*args):
  return _kmp.kptr_cp(*args)
kptr_cp = _kmp.kptr_cp
kfalse = _kmp.kfalse
ktrue = _kmp.ktrue
kother = _kmp.kother
kprev = _kmp.kprev
knext = _kmp.knext
kleft = _kmp.kleft
kright = _kmp.kright
kbefore = _kmp.kbefore
kafter = _kmp.kafter
ktbool = _kmp.ktbool
ktptr = _kmp.ktptr
ktchar = _kmp.ktchar
ktbyte = _kmp.ktbyte
ktfloat = _kmp.ktfloat
ktint = _kmp.ktint
ktuint = _kmp.ktuint
ktsize = _kmp.ktsize
ktid = _kmp.ktid
kthash = _kmp.kthash
ktllist = _kmp.ktllist
ktdllist = _kmp.ktdllist
kthashlist = _kmp.kthashlist
ktobject = _kmp.ktobject
X = _kmp.X
Y = _kmp.Y
Z = _kmp.Z
W = _kmp.W
Q = _kmp.Q
U = _kmp.U
V = _kmp.V
P = _kmp.P
N = _kmp.N
PITCH = _kmp.PITCH
YAW = _kmp.YAW
ROLL = _kmp.ROLL
NZEROF = _kmp.NZEROF
ZEROF = _kmp.ZEROF
ONEF = _kmp.ONEF

def kzmalloc(*args):
  return _kmp.kzmalloc(*args)
kzmalloc = _kmp.kzmalloc
M_PI = _kmp.M_PI
MATH_PI = _kmp.MATH_PI
MATH_EPSILON = _kmp.MATH_EPSILON

def deg2rad(*args):
  return _kmp.deg2rad(*args)
deg2rad = _kmp.deg2rad

def rad2deg(*args):
  return _kmp.rad2deg(*args)
rad2deg = _kmp.rad2deg

def kfabs(*args):
  return _kmp.kfabs(*args)
kfabs = _kmp.kfabs
class kmvect3f:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmvect3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmvect3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kmp.kmvect3f_x_set
    __swig_getmethods__["x"] = _kmp.kmvect3f_x_get
    __swig_setmethods__["y"] = _kmp.kmvect3f_y_set
    __swig_getmethods__["y"] = _kmp.kmvect3f_y_get
    __swig_setmethods__["z"] = _kmp.kmvect3f_z_set
    __swig_getmethods__["z"] = _kmp.kmvect3f_z_get
    def __init__(self, *args): 
        this = _kmp.new_kmvect3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self): return _kmp.kmvect3f___str__(self)
    def vAdd(self, *args): return _kmp.kmvect3f_vAdd(self, *args)
    def sAdd(self, *args): return _kmp.kmvect3f_sAdd(self, *args)
    def vSub(self, *args): return _kmp.kmvect3f_vSub(self, *args)
    def sSub(self, *args): return _kmp.kmvect3f_sSub(self, *args)
    def vMul(self, *args): return _kmp.kmvect3f_vMul(self, *args)
    def sMul(self, *args): return _kmp.kmvect3f_sMul(self, *args)
    def vDiv(self, *args): return _kmp.kmvect3f_vDiv(self, *args)
    def sDiv(self, *args): return _kmp.kmvect3f_sDiv(self, *args)
    def sSet(self, *args): return _kmp.kmvect3f_sSet(self, *args)
    def vSet(self, *args): return _kmp.kmvect3f_vSet(self, *args)
    def Zero(self): return _kmp.kmvect3f_Zero(self)
    def Reverse(self): return _kmp.kmvect3f_Reverse(self)
    def Len(self): return _kmp.kmvect3f_Len(self)
    def sqLen(self): return _kmp.kmvect3f_sqLen(self)
    def Distance(self, *args): return _kmp.kmvect3f_Distance(self, *args)
    def Norm(self): return _kmp.kmvect3f_Norm(self)
    def Perpendicular2d(self): return _kmp.kmvect3f_Perpendicular2d(self)
    def Cross(self, *args): return _kmp.kmvect3f_Cross(self, *args)
    def Dot(self, *args): return _kmp.kmvect3f_Dot(self, *args)
    def vProject(self, *args): return _kmp.kmvect3f_vProject(self, *args)
    __swig_destroy__ = _kmp.delete_kmvect3f
    __del__ = lambda self : None;
kmvect3f_swigregister = _kmp.kmvect3f_swigregister
kmvect3f_swigregister(kmvect3f)


def kmvect3f_vadd(*args):
  return _kmp.kmvect3f_vadd(*args)
kmvect3f_vadd = _kmp.kmvect3f_vadd

def kmvect3f_sadd(*args):
  return _kmp.kmvect3f_sadd(*args)
kmvect3f_sadd = _kmp.kmvect3f_sadd

def kmvect3f_vsub(*args):
  return _kmp.kmvect3f_vsub(*args)
kmvect3f_vsub = _kmp.kmvect3f_vsub

def kmvect3f_ssub(*args):
  return _kmp.kmvect3f_ssub(*args)
kmvect3f_ssub = _kmp.kmvect3f_ssub

def kmvect3f_vmul(*args):
  return _kmp.kmvect3f_vmul(*args)
kmvect3f_vmul = _kmp.kmvect3f_vmul

def kmvect3f_smul(*args):
  return _kmp.kmvect3f_smul(*args)
kmvect3f_smul = _kmp.kmvect3f_smul

def kmvect3f_vdiv(*args):
  return _kmp.kmvect3f_vdiv(*args)
kmvect3f_vdiv = _kmp.kmvect3f_vdiv

def kmvect3f_sdiv(*args):
  return _kmp.kmvect3f_sdiv(*args)
kmvect3f_sdiv = _kmp.kmvect3f_sdiv

def kmvect3f_sset(*args):
  return _kmp.kmvect3f_sset(*args)
kmvect3f_sset = _kmp.kmvect3f_sset

def kmvect3f_vset(*args):
  return _kmp.kmvect3f_vset(*args)
kmvect3f_vset = _kmp.kmvect3f_vset

def kmvect3f_zero(*args):
  return _kmp.kmvect3f_zero(*args)
kmvect3f_zero = _kmp.kmvect3f_zero

def kmvect3f_reverse(*args):
  return _kmp.kmvect3f_reverse(*args)
kmvect3f_reverse = _kmp.kmvect3f_reverse

def kmvect3f_length(*args):
  return _kmp.kmvect3f_length(*args)
kmvect3f_length = _kmp.kmvect3f_length

def kmvect3f_sqlength(*args):
  return _kmp.kmvect3f_sqlength(*args)
kmvect3f_sqlength = _kmp.kmvect3f_sqlength

def kmvect3f_distance(*args):
  return _kmp.kmvect3f_distance(*args)
kmvect3f_distance = _kmp.kmvect3f_distance

def kmvect3f_normalize(*args):
  return _kmp.kmvect3f_normalize(*args)
kmvect3f_normalize = _kmp.kmvect3f_normalize

def kmvect3f_perpendicular2d(*args):
  return _kmp.kmvect3f_perpendicular2d(*args)
kmvect3f_perpendicular2d = _kmp.kmvect3f_perpendicular2d

def kmvect3f_cross(*args):
  return _kmp.kmvect3f_cross(*args)
kmvect3f_cross = _kmp.kmvect3f_cross

def kmvect3f_dot(*args):
  return _kmp.kmvect3f_dot(*args)
kmvect3f_dot = _kmp.kmvect3f_dot

def kmvect3f_vproject(*args):
  return _kmp.kmvect3f_vproject(*args)
kmvect3f_vproject = _kmp.kmvect3f_vproject
class kmquat4f:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmquat4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmquat4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _kmp.kmquat4f_v_set
    __swig_getmethods__["v"] = _kmp.kmquat4f_v_get
    __swig_setmethods__["w"] = _kmp.kmquat4f_w_set
    __swig_getmethods__["w"] = _kmp.kmquat4f_w_get
    def __init__(self): 
        this = _kmp.new_kmquat4f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kmp.delete_kmquat4f
    __del__ = lambda self : None;
kmquat4f_swigregister = _kmp.kmquat4f_swigregister
kmquat4f_swigregister(kmquat4f)


def kmquat4f_sset(*args):
  return _kmp.kmquat4f_sset(*args)
kmquat4f_sset = _kmp.kmquat4f_sset

def kmquat4f_qset(*args):
  return _kmp.kmquat4f_qset(*args)
kmquat4f_qset = _kmp.kmquat4f_qset

def kmquat4f_vsset(*args):
  return _kmp.kmquat4f_vsset(*args)
kmquat4f_vsset = _kmp.kmquat4f_vsset

def kmquat4f_zero(*args):
  return _kmp.kmquat4f_zero(*args)
kmquat4f_zero = _kmp.kmquat4f_zero

def kmquat4f_vinverse(*args):
  return _kmp.kmquat4f_vinverse(*args)
kmquat4f_vinverse = _kmp.kmquat4f_vinverse

def kmquat4f_length(*args):
  return _kmp.kmquat4f_length(*args)
kmquat4f_length = _kmp.kmquat4f_length

def kmquat4f_sqlength(*args):
  return _kmp.kmquat4f_sqlength(*args)
kmquat4f_sqlength = _kmp.kmquat4f_sqlength

def kmquat4f_qadd(*args):
  return _kmp.kmquat4f_qadd(*args)
kmquat4f_qadd = _kmp.kmquat4f_qadd

def kmquat4f_qsub(*args):
  return _kmp.kmquat4f_qsub(*args)
kmquat4f_qsub = _kmp.kmquat4f_qsub

def kmquat4f_qmul(*args):
  return _kmp.kmquat4f_qmul(*args)
kmquat4f_qmul = _kmp.kmquat4f_qmul

def kmquat4f_qvmul(*args):
  return _kmp.kmquat4f_qvmul(*args)
kmquat4f_qvmul = _kmp.kmquat4f_qvmul

def kmquat4f_vqmul(*args):
  return _kmp.kmquat4f_vqmul(*args)
kmquat4f_vqmul = _kmp.kmquat4f_vqmul

def kmquat4f_smul(*args):
  return _kmp.kmquat4f_smul(*args)
kmquat4f_smul = _kmp.kmquat4f_smul

def kmquat4f_sdiv(*args):
  return _kmp.kmquat4f_sdiv(*args)
kmquat4f_sdiv = _kmp.kmquat4f_sdiv

def kmquat4f_angle(*args):
  return _kmp.kmquat4f_angle(*args)
kmquat4f_angle = _kmp.kmquat4f_angle

def kmquat4f_axis(*args):
  return _kmp.kmquat4f_axis(*args)
kmquat4f_axis = _kmp.kmquat4f_axis

def kmquat4f_qrotate(*args):
  return _kmp.kmquat4f_qrotate(*args)
kmquat4f_qrotate = _kmp.kmquat4f_qrotate

def kmquat4f_vrotate(*args):
  return _kmp.kmquat4f_vrotate(*args)
kmquat4f_vrotate = _kmp.kmquat4f_vrotate

def kmquat4f_easet(*args):
  return _kmp.kmquat4f_easet(*args)
kmquat4f_easet = _kmp.kmquat4f_easet

def kmquat4f_ea(*args):
  return _kmp.kmquat4f_ea(*args)
kmquat4f_ea = _kmp.kmquat4f_ea
class kmmat33f:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kmmat33f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kmmat33f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m11"] = _kmp.kmmat33f_m11_set
    __swig_getmethods__["m11"] = _kmp.kmmat33f_m11_get
    __swig_setmethods__["m12"] = _kmp.kmmat33f_m12_set
    __swig_getmethods__["m12"] = _kmp.kmmat33f_m12_get
    __swig_setmethods__["m13"] = _kmp.kmmat33f_m13_set
    __swig_getmethods__["m13"] = _kmp.kmmat33f_m13_get
    __swig_setmethods__["m21"] = _kmp.kmmat33f_m21_set
    __swig_getmethods__["m21"] = _kmp.kmmat33f_m21_get
    __swig_setmethods__["m22"] = _kmp.kmmat33f_m22_set
    __swig_getmethods__["m22"] = _kmp.kmmat33f_m22_get
    __swig_setmethods__["m23"] = _kmp.kmmat33f_m23_set
    __swig_getmethods__["m23"] = _kmp.kmmat33f_m23_get
    __swig_setmethods__["m31"] = _kmp.kmmat33f_m31_set
    __swig_getmethods__["m31"] = _kmp.kmmat33f_m31_get
    __swig_setmethods__["m32"] = _kmp.kmmat33f_m32_set
    __swig_getmethods__["m32"] = _kmp.kmmat33f_m32_get
    __swig_setmethods__["m33"] = _kmp.kmmat33f_m33_set
    __swig_getmethods__["m33"] = _kmp.kmmat33f_m33_get
    def __init__(self): 
        this = _kmp.new_kmmat33f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kmp.delete_kmmat33f
    __del__ = lambda self : None;
kmmat33f_swigregister = _kmp.kmmat33f_swigregister
kmmat33f_swigregister(kmmat33f)


def kmmat33f_zero(*args):
  return _kmp.kmmat33f_zero(*args)
kmmat33f_zero = _kmp.kmmat33f_zero

def kmmat33f_sset(*args):
  return _kmp.kmmat33f_sset(*args)
kmmat33f_sset = _kmp.kmmat33f_sset

def kmmat33f_mset(*args):
  return _kmp.kmmat33f_mset(*args)
kmmat33f_mset = _kmp.kmmat33f_mset

def kmmat33f_det(*args):
  return _kmp.kmmat33f_det(*args)
kmmat33f_det = _kmp.kmmat33f_det

def kmmat33f_transpose(*args):
  return _kmp.kmmat33f_transpose(*args)
kmmat33f_transpose = _kmp.kmmat33f_transpose

def kmmat33f_inverse(*args):
  return _kmp.kmmat33f_inverse(*args)
kmmat33f_inverse = _kmp.kmmat33f_inverse

def kmmat33f_madd(*args):
  return _kmp.kmmat33f_madd(*args)
kmmat33f_madd = _kmp.kmmat33f_madd

def kmmat33f_msub(*args):
  return _kmp.kmmat33f_msub(*args)
kmmat33f_msub = _kmp.kmmat33f_msub

def kmmat33f_smul(*args):
  return _kmp.kmmat33f_smul(*args)
kmmat33f_smul = _kmp.kmmat33f_smul

def kmmat33f_sdiv(*args):
  return _kmp.kmmat33f_sdiv(*args)
kmmat33f_sdiv = _kmp.kmmat33f_sdiv

def kmmat33f_mmul(*args):
  return _kmp.kmmat33f_mmul(*args)
kmmat33f_mmul = _kmp.kmmat33f_mmul

def kmmat33f_vmul(*args):
  return _kmp.kmmat33f_vmul(*args)
kmmat33f_vmul = _kmp.kmmat33f_vmul
# This file is compatible with both classic and new-style classes.


